# **Name**
# GitHub Release - Reusable workflow

# **Overview**
# This workflow creates a GitHub release with the changelog.
# It checks if a fresh commit is available, builds the project,
# and creates a changelog, and a PR with the release notes.

# **When**
# Mainly, this workflow is called by other workflows.

name: GitHub Release

on:
  workflow_call:
    inputs:
      branch_name:
        description: "Default branch name for the GitHub Release"
        default: "main"
        required: false
        type: string
      test-needed:
        description: "Set to false if the test step is not needed."
        required: false
        type: boolean
        default: true

# Define the jobs that are called by other workflows.
jobs:
  # STEP 1: Check if a fresh commit is available
  check_date:
    name: Check latest commit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: "Debug: Print latest commit"
        run: |
          echo ${{ github.sha }}
          echo $(git rev-list  --after="29 days" --max-count=1  ${{ github.sha }})

      - id: should_run
        continue-on-error: true
        name: Check if release is needed
        run: |
          set -x
          if test -z $(git rev-list  --after="29 days" --max-count=1  ${{ github.sha }}) ; then
            should_run=false
          else
            should_run=true
          fi
          echo "should_run=$should_run"
          echo "should_run=$should_run" >> $GITHUB_OUTPUT

  # STEP 2: Print the should_run output for debugging
  echo_should_run:
    name: "Debug: Print should_run output"
    runs-on: ubuntu-latest
    needs: check_date
    steps:
      - name: "Print should_run output"
        run: |
          echo "## Should Run Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Should Run - ${{ needs.check_date.outputs.should_run }}" >> $GITHUB_STEP_SUMMARY
          if [[ ${{ needs.check_date.outputs.should_run }} == "false" ]] ; then
            echo '❌ No fresh commits detected. Skipping the build process!' >> $GITHUB_STEP_SUMMARY
          else
            echo '✅ Fresh commits detected. Proceeding with the build process!' >> $GITHUB_STEP_SUMMARY
          fi

  # STEP 3: Build the project if a fresh commit is available
  build:
    name: "Build: Node 20"
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set Node version to 20
        uses: actions/setup-node@39370e3970a6d050c480ffad4ff0ed4d3fdee5af # v4.1.0
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: ./package.json
      - name: Install dependencies
        run: npm install
      - name: Run tests
        if: ${{ inputs.test-needed == true }}
        run: npm test

  # STEP 4: Create a changelog and a PR with the release notes
  changelog:
    name: Changelog
    needs:
      - build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest

    outputs:
      skipped: ${{ steps.changelog.outputs.skipped }}
      tag: ${{ steps.changelog.outputs.tag }}
      clean_changelog: ${{ steps.changelog.outputs.clean_changelog }}
      version: ${{ steps.changelog.outputs.version }}
      git_pr_branch: ${{ steps.branchname.outputs.git_pr_branch }}

    env:
      PR_BRANCH: release/ci-${{ github.sha }}

    steps:
      - name: Checkout branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Get the branch name
        id: branchname
        run: |
          echo "git_pr_branch=${{ env.PR_BRANCH }}" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b ${{ env.PR_BRANCH }}

      - name: Create release commit
        id: changelog
        uses: TriPSs/conventional-changelog-action@dd19d7c07e5f620b2d6f48d547148a4b6b29e92f # v3.19.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-user-name: "github-actions"
          git-user-email: "github-actions[bot]@users.noreply.github.com"
          git-branch: ${{ env.PR_BRANCH }}
          output-file: false
          skip-git-pull: true

      - name: Create Changelog PR with release notes
        if: steps.changelog.outputs.skipped == 'false'
        run: |
          PR_TITLE="release: version bump to ${{ steps.changelog.outputs.tag }}"
          PR_BODY="
          ## Type of change
          - [ ] Bug fix
          - [ ] New feature (non-breaking change)
          - [ ] Tech debt (refactoring, code cleanup, etc.)
          - [ ] Build/deploy pipeline (CI/CD)
          - [x] Other

          ## Objective
          Automated version bump to ${{ steps.changelog.outputs.tag }} by GitHub Actions."
          CREATED_PR=$(gh pr create \
            --base '${{ inputs.branch_name }}' \
            --head '${{ env.PR_BRANCH }}' \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --label 'ignore-for-release')
          echo "Created PR: ${CREATED_PR}" >> $GITHUB_STEP_SUMMARY
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Merge PR and delete branch
        if: steps.changelog.outputs.skipped == 'false'
        run: |
          gh pr merge --squash --auto --delete-branch ${{ env.PR_BRANCH }}
        env:
          GH_TOKEN: ${{ github.token }}

  # STEP 5: Print the changelog outputs for debugging
  echo_changelog:
    name: "Debug: Print changelog outputs"
    if: false # This step is only for debugging purposes. It is not executed.
    runs-on: ubuntu-latest
    needs: changelog
    steps:
      - name: "Print changelog outputs"
        env:
          skipped: ${{ needs.changelog.outputs.skipped }}
          tag: ${{ needs.changelog.outputs.tag }}
          version: ${{ needs.changelog.outputs.version }}
        run: |
          echo "## Changelog Outputs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "[Changelog] Skipped - $skipped"  >> $GITHUB_STEP_SUMMARY
          echo "[Changelog] Tag - $tag"  >> $GITHUB_STEP_SUMMARY
          echo "[Changelog] Version - $version"  >> $GITHUB_STEP_SUMMARY
          echo ""  >> $GITHUB_STEP_SUMMARY

  # STEP 6: Create a GitHub release with the changelog
  release:
    name: GitHub Release
    needs: changelog
    if: github.event_name != 'pull_request' && needs.changelog.outputs.skipped == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Create GH Release
        uses: fregante/release-with-changelog@779fd5e658f82e5b11b1c0a352a6838d3bd8f67f # v3.6.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          exclude: 'Ignore|md|skip|vscode|release'

  # STEP 7: If the changelog step fails, rollback the changes
  on-changelog-failure:
    name: "Changelog: Failure"
    if: failure()
    needs: changelog
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
      - name: Delete Stale Branch
        env:
          BRANCH_NAME: ${{ needs.changelog.outputs.git_pr_branch }}
        run: |
          if ! [[ -z "$BRANCH_NAME" ]]; then
            git push --quiet origin --delete $BRANCH_NAME
            echo ""  >> $GITHUB_STEP_SUMMARY
            echo "✅ Deleted '$BRANCH_NAME' branch." >> $GITHUB_STEP_SUMMARY
          fi
      - name: Delete Stale Tag
        env:
          TAG_VERSION: ${{ needs.changelog.outputs.tag }}
        run: |
          if git show-ref --tags --verify --quiet "refs/tags/$TAG_VERSION"; then
            git push --delete origin $TAG_VERSION
            echo ""  >> $GITHUB_STEP_SUMMARY
            echo "✅ Deleted '$TAG_VERSION' tag." >> $GITHUB_STEP_SUMMARY
            echo ""  >> $GITHUB_STEP_SUMMARY
          fi
